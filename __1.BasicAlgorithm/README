POJ 2525 Text Formalization
给定英文中用单引号缩写、首字母缩写和全写的对应关系。给定一段文本，要求把其中的缩写展开。对于单引号缩写如果和对应关系一样，那就按对应关系里的展开；如果文本中全是大写，那展开也全是大写；如果文本首字母是大写，那展开的首字母也是大写。而对于首字母缩写，只要展开第一次出现的文本，而且要在展开的文本之后，输出一对括号，中间是原来的缩写串。
模拟 从头到尾遍历文本串，从前到后与对应关系表进行匹配，如果匹配则输出扩展串，且将遍历的指针移动到匹配的文本后；否则输出未匹配的字符。

POJ 1684 Dynamic Declaration Language (DDL)
给定一种语言的源程序，要求找出其中的错误。有两种错误，第一种错误是如果声明一个变量，且之前该变量被声明过，但却没有被引用；第二种错误，当一个变量被引用，但在此之前没有被声明。
模拟 先将程序读入。然后根据题目定义的语言处理，按照从上到下，goto的跳转来的顺序来处理程序。

POJ 1421 Peter's Calculator
给定一些赋值语句，赋值语句左侧是一个变量，右边是一个表达式；表达式有加、减、乘、变量、带负号的整数、括号。有重置语句，将所有赋值语句清空。输出变量语句，如果变量是确定的，输出该变量的值；否则输出UNDEF。每个变量的赋值语句以最近出现的为准，如果一个变量的赋值表达式中不含变量，那么这个变量的值是确定的；如果变量x的赋值表达式中含有变量，且其中所有变量都确定，那么变量x才是确定的。
Hash+表达式求值+模拟 对于变量名需要用Hash来映射到变量编号。现将表达式分解成许多项，每一项可分为数值、符号和变量，对于负号和减号可以通过上下文进行区分；如果变量全部是确定的，那么该表达式就是确定的，即被赋值的变量也是确定的；该表达式便可用数字栈和符号栈进行计算。如果最新都进来的表达式是确定的，那么需要先把其他所有变量变为非确定，然后重新计算，直到没有变量的赋值表达式从非确定变为确定为止。

POJ 1048 Follow My Logic
给定n行字符串，用大写字母表示输入的逻辑变量，？表示输出的逻辑变量，用3*3的符号来表示与门、或门，用o表示在门上的输入或输出上取反，用-|来连接电路，+表示连接的电路的90度转向节点。给定26个输入变量的值，求输出变量的值。
dfs+模拟 对于每一个逻辑门输出，他有两个输入端，而这两个输入端可能连接着其他逻辑门的输出；或者连接输入逻辑变量，dfs得到逻辑关系。注意电路可能互相邻接，所以要用-|的方向来确定电路的走向。读入变量的之后，可根据逻辑关系，递归求解输出变量？的值。

POJ 2050 Searching the Web
给定n（1<=n<=100）篇文章，最多m（1<=m<=1500）行，要求构造反置表。读入输入的搜索串，形式有word, word1 AND word2, word1 OR word2, NOT word，要求搜索出的文章包含word，word1 word2都包含，包含word1 或者 word2，不包含word。除了NOT word搜索外，只需要输出符合要求的文章包含关键字的行，而NOT word需要输出符合要求的文章全文。
Hash+模拟 对于文章中的所有单词进行Hash，构造反置表，即每个单词一个表，表中存放单词在第i篇文章出现，在全文的第j行。对于搜索串，则可用反置表来获得解。

POJ 3306 Busy Airport
给定一些航班的降落的申请时间，降落时长，和已有的航道数量。如果没有航道可以，航班需要10分钟后再次申请。一个航班降落被批准，占用航道一个降落时长，后降落结束，航道占用被释放。模拟航班降落，按照时间顺序给出航班批准，申请忽略，和降落结束的命令。
模拟 对申请、降落放入set中来按时间顺序处理。

POJ 3434 Terrarium
给定一个N*N（1<=N<=1000）的矩阵，矩阵中有平地、障碍和用26个字母表示的26条不同的蛇，大写字母表示蛇头，小写字母表示蛇身和蛇尾。26条蛇每秒按照字母顺序移动，每条蛇首先尝试向前走，不行则向右走，否则向左走，实在不行停止1秒。要求输出T（1<=T<=1000000）秒后矩阵的样子。
手写queue模拟 首先读入蛇，根据蛇首和蛇身的位子来确定它的初始方向，然后用手写的队列来模拟蛇的移动。

